‚≠ï What is PHP?

‚úÖ PHP is a server side scripting language. that is used to develop Static websites or Dynamic websites or Web applications.
    PHP stands for Hypertext Pre-processor, that earlier stood for Personal Home Pages.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï What is Scripting Language?

‚úÖ A script is a set of programming instructions that is interpreted at runtime.

‚úÖ The purpose of the scripts is usually to enhance the performance or perform routine tasks for an application.

‚úÖ Server side scripts are interpreted on the server while client side scripts are interpreted by the client application.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï Programming Language Vs Scripting Language

‚úÖ 
    Programming language	                                                    Scripting language
+-------------------------------------------------------------------------------------------------------------------------------------+
1. Has all the features needed to develop complete applications.	            Mostly used for routine tasks
2. The code has to be compiled before it can be executed	                    The code is usually executed without compiling
3. Does not need to be embedded into other languages	                        Is usually embedded into other software environments.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï What does PHP stand for?

‚úÖ PHP: Hypertext Preprocessor.
‚úÖ HTML is an added advantage when learning PHP Language. You can even learn PHP without knowing HTML but it‚Äôs recommended you at least know the basics of HTML.
‚úÖ Database management systems DBMS for database powered applications.
‚úÖ For more advanced topics such as interactive applications and web services, you will need JavaScript and XML.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï Why use PHP?

‚úÖ  do not need to have PHP installed; only a web browser would be enough.
‚úÖ  PHP has in built support for working hand in hand with MySQL
‚úÖ  PHP is cross platform; this means you can deploy your application on a number of different operating systems such as windows, Linux, Mac OS etc.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï PHP File Extension

‚úÖ .phtml
‚úÖ .php3
‚úÖ .php4
‚úÖ .php5
‚úÖ .phps
‚úÖ <?php ‚Ä¶ ?>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï XAMPP

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï PHP Data Types, Variables, Constant, Operators Tutorial

üõë PHP Data Types

‚úÖ A Data type is the classification of data into a category according to its attributes;

        Alphanumeric characters are classified as strings
        Whole numbers are classified integers
        Numbers with decimal points are classified as floating points.
        True or false values are classified as Boolean.

üõë PHP Variables

‚úÖ All variable names must start with the dollar sign.
‚úÖ The var_dump function is used to determine the data type. 

    Example:

    $a = 1;
    var_dump($a);

    O/p:
    int(1)

üõë PHP Constant

‚úÖ  A constant is a variable whose value cannot be changed at runtime.

    Example:

    define(‚ÄòPI‚Äô,3.14); 

üõë PHP Operators 

‚úÖ Arithmetic

Operator	    Name	            Description	                                Example	                    Output
+---------------------------------------------------------------------------------------------------------------------------+

+	            Addition	        Summation of x and y	                    1 + 1;	                    2
‚Äì	            Subtraction	        Difference between x and y	                1 ‚Äì 1;	                    0
*	            Multiplication	    Multiplies x and y	                        3 * 7;	                    21
/	            Division	        Quotient of x and y	                        45 / 5;	                    9
%	            PHP Modulus	        Gives remainder of dividing x and y	        10 % 3;	                    1
-n	            Negation	        Turns n into a negative number	            -(-5);	                    5
x . y	        Concatenation	    Puts together x and y	                    ‚ÄúPHP‚Äù . ‚Äù ROCKS‚Äù;10 . 3;	PHP ROCKS103

‚úÖ Assignment

Operator	    Name	            Description	                        Example	                            Output
+-----------------------------------------------------------------------------------------------------------------------------+

x = ?	        assignment	        Assigns the value of x to ?	        $x = 5;	                            5
x += ?	        addition	        Increments the value of x by ?	    $x = 2;$x += 1;	                    3
X -= ?	        subtraction	        Subtracts ? from the value of x	    $x = 3;$x -= 2;	                    1
X *=?	        multiplication	    Multiplies the value of x ? times	$x = 0;$x *=9;	                    0
X /=?	        division	        Quotient of x and ?	                $x = 6;$x /=3;	                    2
X %=?	        modulus	            The reminder of dividing x by?	    $x = 3;$x %= 2;	                    1
X .=?	        concatenate	        Puts together items	‚Äù               $x = ‚ÄòPretty‚Äô;$x .= ‚Äò Cool!‚Äô;‚Äù	    Pretty Cool!

‚úÖ Comparison

Operator	    Name	                Description	                                                                    Example	        Output
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

X == y	        Equal	                Compares x and y then returns true if they are equal	                        1 == ‚Äú1‚Äù;	    True or 1
X === y	        identical	            Compares both values and data types.	                                        1 === ‚Äú1‚Äù;	    False or 0. Since 1 is integer and ‚Äú1‚Äù is string
X != y,x <> y	PHP Not equal	        Compares values of x and y. returns true if the values are not equal	        2 != 1;	        True or 1
X > y	        Greater than	        Compares values of x and y. returns true if x is greater than y	                3 > 1;	        True or 1
X < y	        Less than	            Compares values of x and y. returns true if x is less than y	                2 < 1;	        False or 0
X >= y	        Greater than or equal	Compares values of x and y. returns true if x is greater than or equal to y	    1 >=1	        True or 1
X <= y	        Less than or equal	    Compares values of x and y. returns true if x is greater than or equal to y	    8 <= 6	        False or 0

‚úÖ Logical

Operator	            Name	                Description	                                        Example	                Output
+--------------------------------------------------------------------------------------------------------------------------------------------------+

X and y, x && y	        And	                    Returns true if both x and y are equal	            1 and 4;True&& False;	True or 1False or 0
X or y, x || y	        Or	                    Returns true if either x or y is true	            6 or 9;0 || 0;	        True or 1False or 0
X xor y	                Exclusive or, xor	    Returns true if only x is true or only y is true	1 xor 1;1 xor 0;	    False or 0True or 1
!x	                    Not	                    Returns true if x is false and false if x is true	!0;	                    True or 1

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï PHP Comments

‚úÖ //
‚úÖ /* */

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï PHP Include & PHP Include_once

‚úÖ The ‚Äúinclude‚Äù php statement is used to include other files into a PHP file.

‚úÖ It has two variations, include and include_once. Include_once is ignored by the PHP interpreter if the file to be included.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï PHP Require & PHP require_once

‚úÖ The require statement has two variations, require and require_once.

‚úÖ The require/require_once statement is used to include file.

‚úÖ Require_once is ignored if the required file has already been added by any of the four include statements.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï PHP Array

‚úÖ A PHP array is a variable that stores more than one piece of related data in a single variable.

üõë Numeric Arrays

‚úÖ Numeric arrays use number as access keys.

‚úÖ An access key is a reference to a memory slot in an array variable.

‚úÖ The access key is used whenever we want to read or assign a new value an array element.

    Example:
    
    $movie[0] = 'Shaolin Monk';
    $movie[1] = 'Drunken Master';
    $movie[2] = 'American Ninja';
    $movie[3] = 'Once upon a time in China';
    $movie[4] = 'Replacement Killers';

    $movie = array(0 => "Shaolin Monk",
               1 => "Drunken Master",
               2 => "American Ninja",
               3 => "Once upon a time in China",
               4 =>"Replacement Killers" );

üõë PHP Associative Array

‚úÖ Associative array differ from numeric array in the sense that associative arrays use descriptive names for id keys.

    Example:

    <?php
    $variable_name['key_name'] = value;

    $variable_name = array('keyname' => value);
    ?>

üõë PHP Multi-Dimensional arrays

‚úÖ These are arrays that contain other nested arrays.

‚úÖ The advantage of multidimensional arrays is that they allow us to group related data together.

üõë PHP Array Functions:

‚úÖ Count : The count function is used to count the number of elements that an php array contains. The code below shows the implementation.

    Example:

    <?php
    $lecturers = array("Mr. Jones", "Mr. Banda", "Mrs. Smith");
    echo count($lecturers);
    ?>

‚úÖ is_array function : The is_array function is used to determine if a variable is an array or not. Let‚Äôs now look at an example that implements the is_array functions.

‚úÖ Sort : This function is used to sort arrays by the values.

    NOTE: It removes the existing access keys and add new numeric keys.

        Example:
        
        <?php
        $persons = array("Mary" => "Female", "John" => "Male", "Mirriam" => "Female");

        sort($persons);

        print_r($persons);
        ?>

        O/P:

        Array ( [0] => Female [1] => Female [2] => Male )

‚úÖ ksort: This function is used to sort the array using the key. The following example illustrates its usage.

‚úÖ asort : This function is used to sort the array using the values. The following example illustrates its usage.

    Example:

    <?php
    $persons = array("Mary" => "Female", "John" => "Male", "Mirriam" => "Female");
    asort($persons);
    print_r($persons);
    ?>

    O/P:

    Array ( [Mary] => Female [Mirriam] => Female [John] => Male )

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï What is a control structure?

‚úÖ Code execution can be grouped into categories as shown below

        Sequential ‚Äì this one involves executing all the codes in the order in which they have been written.
        Decision ‚Äì this one involves making a choice given a number of options. The code executed depends on the value of the condition.

üõë PHP IF Else

‚úÖ 
        <?php
        if (condition is true) {

        block one

        else

        block two

        }
        ?>

üõë PHP Switch Case

‚úÖ

Example:

<?php
switch(condition){
case value:
//block of code to be executed
break;
case value2:
//block of code to be executed
break
default://default block code
break;
}
?>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï PHP Loop: For, ForEach, While, Do While 

üõë PHP For Loop

‚úÖ for

    Syntax:

    <?php
    for (initialize; condition; increment){

    //code to be executed

    }
    ?>
    
‚úÖ for‚Ä¶ each.

    Syntax:

    <?php
    foreach($array_variable  as $array_values){

    block of code to be executed

    }
    ?> 

üõë While Loop

‚úÖ They are used to execute a block of code a repeatedly until the set condition gets satisfied

‚úÖ Types of while loops

    Do‚Ä¶ while ‚Äì     executes the block of code at least once before evaluating the condition
    While‚Ä¶ ‚Äì    checks the condition first. If it evaluates to true, the block of code is executed as long as the condition is true. 
                If it evaluates to false, the execution of the while loop is terminated.

‚úÖ 
    <?php
    while (condition){

    block of code to be executed;

    }
    ?>

‚úÖ

<?php
do{

block of code to be executed

}
while(condition);
?>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

‚≠ï PHP Strings

        <?php
        $name='Alicia';
        echo "$name is friends with kalinda";
        ?>

Example:

    <?php

    $baby_name = "Shalon";

    echo <<<EOT

        When $baby_name was a baby,

        She used to look like a "boy".

    EOT;

    ?>


    HERE,

    <<<EOT is the string delimiter.

    EOT is the acronym for end of text. >>>

‚úÖ The Nowdoc string creation method is similar to the heredoc method but works like the way single quotes work.

‚úÖ No parsing takes place inside the Nowdoc.

üõë PHP String Function

‚úÖ strtolower
‚úÖ strtoupper 
‚úÖ strlen
‚úÖ explode
‚úÖ substr
‚úÖ str_replace
‚úÖ strpos
‚úÖ sha1
‚úÖ md5
‚úÖ str_word_count
‚úÖ ucfirst
‚úÖ lcfirst

‚≠ï PHP Functions

‚úÖA Function in PHP is a reusable piece or block of code that performs a specific action. 
‚úÖIt takes input from the user in the form of parameters, performs certain actions, and gives the output. 
‚úÖFunctions can either return values when called or can simply perform an operation without returning any value.

üõë Numeric Function

‚úÖ is_number
‚úÖ number_format
‚úÖ rand
‚úÖ round
‚úÖ sqrt
‚úÖ cos
‚úÖ sin
‚úÖ tan
‚úÖ pi

üõë Date Function

‚úÖ The date function is used to format Unix date and time to human readable format.

üõë User Defined Function

‚úÖ 

<?php

//define a function that displays hello function

function add_numbers(){   
	echo 1 + 2;
}
add_numbers ();
?>

‚≠ï PHP Session and Cookie

üõë Cookies

    ‚úÖ A cookie is a small file with the maximum size of 4KB that the web server stores on the client computer.
    ‚úÖ Http is a stateless protocol; cookies allow us to track the state of the application using small files stored on the user‚Äôs computer.The path were the cookies are stored depends on the browser.Internet Explorer usually stores them in Temporal Internet Files folder.
    ‚úÖ Personalizing the user experience ‚Äì this is achieved by allowing users to select their preferences.The page requested that follow are personalized based on the set preferences in the cookies.
    ‚úÖ Tracking the pages visited by a user

    ‚úî Creating Cookies:

    ‚úÖ Example:

        <?php

        setcookie(cookie_name, cookie_value, [expiry_time], [cookie_path], [domain], [secure], [httponly]);

        ?>

    ‚úî Retrieving Cookie Value

    ‚úÖ

        <?php
            print_r($_COOKIE);    //output the contents of the cookie array variable 
        ?>

    ‚úî Deleting cookie_name
    
    ‚úÖ

        <?php

        setcookie("user_name", "Guru99", time() - 360,'/');

        ?>

üõë Session

‚úÖ A session is a global variable stored on the server.
‚úÖ Each session is assigned a unique id which is used to retrieve stored values.
‚úÖ Whenever a session is created, a cookie containing the unique session id is stored on the user‚Äôs computer and returned with every request to the server. 
    If the client browser does not support cookies, the unique php session id is displayed in the URL
‚úÖ Sessions have the capacity to store relatively large data compared to cookies.
‚úÖ The session values are automatically deleted when the browser is closed. If you want to store the values permanently, then you should store them in the database.
‚úÖ Just like the $_COOKIE array variable, session variables are stored in the $_SESSION array variable. Just like cookies, the session must be started before any HTML tags.

ü§û Why and when to use Sessions?

1.You want to store important information such as the user id more securely on the server where malicious users cannot temper with them.
2.You want to pass values from one page to another.
3.You want the alternative to cookies on browsers that do not support cookies.
4.You want to store global variables in an efficient and more secure way compared to passing them in the URL
5.You are developing an application such as a shopping cart that has to temporary store information with a capacity larger than 4KB.

    ‚úî Creating Session:
        
        Example:

        <?php

        session_start(); //start the PHP_session function 

        if(isset($_SESSION['page_count']))
        {
            $_SESSION['page_count'] += 1;
        }
        else
        {
            $_SESSION['page_count'] = 1;
        }
        echo 'You are visitor number ' . $_SESSION['page_count'];

        ?>
    
    ‚úî Destroying Session Variables

        The session_destroy() function is used to destroy the whole Php session variables.

            Example:

                <?php

                session_destroy(); //destroy entire session 

                ?>

        If you want to destroy only a session single item, you use the unset() function.

            Example:

                <?php

                unset($_SESSION['product']); //destroy product session item 

                ?>
    
        Session_destroy removes all the session data including cookies associated with the session.

        Unset only frees the individual session variables.

        Other data remains intact.
    
‚≠ï PHP Registration Form using GET, POST Methods 

üõë What is Form?

‚úÖ Forms are used to get input from the user and submit it to the web server for processing.

üõë When and why we are using forms?

‚úÖ Forms come in handy when developing flexible and dynamic applications that accept user input.
‚úÖ Forms can be used to edit already existing data from the database

üõë Create a form

Example:

    <html>
    <head>
        <title>Registration Form</title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    </head>
    <body>

        <h2>Registration Form</h2>

        <form action="registration_form.php" method="POST"> First name:

            <input type="text" name="firstname"> <br> Last name:

            <input type="text" name="lastname"> 

            <input type="hidden" name="form_submitted" value="1" />

            <input type="submit" value="Submit">

        </form>
    </body>
    </html>

‚úÖ <input type=‚Äùhidden‚Äù name=‚Äùform_submitted‚Äù value=‚Äù1‚Ä≥/> is a hidden value that is used to check whether the form has been submitted or not

üõë Submitting the form data to the server

The action attribute of the form specifies the submission URL that processes the data. The method attribute specifies the submission type.

‚úÖ PHP POST method

    ‚úî This is the built in PHP super global array variable that is used to get values submitted via HTTP POST method.
    ‚úî The array variable can be accessed from any script in the program; it has a global scope.
    ‚úî This method is ideal when you do not want to display the form post values in the URL.
    ‚úî A good example of using post method is when submitting login details to the server.

    It has the following syntax.

    <?php
        $_POST['variable_name'];
    ?>
                                    HERE,
                                        ‚Äú$_POST[‚Ä¶]‚Äù is the PHP array
                                        ‚Äú‚Äôvariable_name‚Äô‚Äù is the URL variable name.

‚úÖ PHP GET method

    ‚úî This is the built in PHP super global array variable that is used to get values submitted via HTTP GET method.
    ‚úî The array variable can be accessed from any script in the program; it has a global scope.
    ‚úî This method displays the form values in the URL.
    ‚úî It‚Äôs ideal for search engine forms as it allows the users to book mark the results.
    
    It has the following syntax.

    <?php
        $_GET['variable_name'];
    ?>
                                HERE,
                                ‚Äú$_GET[‚Ä¶]‚Äù is the PHP array
                                ‚Äú‚Äôvariable_name‚Äô‚Äù is the URL variable name.

‚≠ï PHP File() Handling & Functions   

üõë What is a File?

‚úÖ A file is simply a resource for storing information on a computer.

üõë PHP File Formats Support

‚úÖ PHP file functions support a wide range of file formats that include:

    File.txt
    File.log
    File.custom_extension i.e. file.xyz
    File.csv
    File.gif, file.jpg etc
    Files provide a permanent cost effective data storage solution for simple data compared to databases that require other software and skills to manage DBMS systems.
    You want to store simple data such as server logs for later retrieval and analysis
    You want to store program settings i.e. program.ini

üõë PHP file() Function

‚úÖ PHP provides a convenient way of working with files via its rich collection of built in functions.
    
üõë PHP file_exists() Function

‚úÖ This function is used to determine whether a file exists or not.

‚úÖ Example:

    <?php
        file_exists($filename); 
    ?>  
            HERE,

                ‚Äúfile_exists()‚Äù is the PHP function that returns true if the file exists and false if it does not exist.
                ‚Äú$file_name‚Äù is the path and name of the file to be checked


üõë PHP fopen() Function

‚úÖ 

    <?php
    fopen($file_name,$mode,$use_include_path,$context);
    ?>
                HERE,

                ‚Äúfopen‚Äù is the PHP open file function
                ‚Äú$file_name‚Äù is the name of the file to be opened
                ‚Äú$mode‚Äù is the mode in which the file should be opened, the table below shows the modes

‚úÖ 

Mode	Description
+---------------------------------------------------------------+
r	    Read file from beginning.
        Returns false if the file doesn‚Äôt exist.
        Read only

r+	    Read file from beginning
        Returns false if the file doesn‚Äôt exist.
        Read and write

w	    Write to file at beginning truncate file to zero length
        If the file doesn‚Äôt exist attempt to create it.
        Write only

w+	    Write to file at beginning, truncate file to zero length
        If the file doesn‚Äôt exist attempt to create it.
        Read and Write

a	    Append to file at end
        If the file doesn‚Äôt exist attempt to create it.
        Write only

a+	    Php append to file at end
        If the file doesn‚Äôt exist attempt to create it
        Read and write

‚úÖ ‚Äú$use_include_path‚Äù is optional, default is false, if set to true, the function searches in the include path too.

‚úÖ ‚Äú$context‚Äù is optional, can be used to specify the context support.

üõë PHP fwrite() Function

‚úÖ The fwrite function is used to write files.

    <?php
    fwrite($handle, $string, $length);
    ?>

                            HERE,

                            ‚Äúfwrite‚Äù is the PHP function for writing to files
                            ‚Äú$handle‚Äù is the file pointer resource
                            ‚Äú$string‚Äù is the data to be written in the file.
                            ‚Äú$length‚Äù is optional, can be used to specify the maximum file length.
 
üõë PHP fclose() Function

‚úÖ The fclose() function is used to close a file in php which is already open

‚úÖ 
        <?php
        fclose($handle); 
        ?>
                    HERE,

                    ‚Äúfclose‚Äù is the PHP function for closing an open file
                    ‚Äú$handle‚Äù is the file pointer resource.

üõë PHP fgets() Function

‚úÖ The fgets function is used to read php files line by line. It has the following basic syntax. 
        
        fgets($handle); 
        
                    HERE,
                    ‚Äú$fgets‚Äù is the PHP function for reading file lines
                    ‚Äú$handle‚Äù is the file pointer resource.

‚úÖ ‚Äúdie()‚Äù function is called if an error occurs. It displays a message and exists execution of the script

üõë PHP copy() Function

‚úÖ The PHP copy function is used to copy files. 

‚úÖ 

        copy($file,$copied_file); 

                HERE,

                ‚Äú$file‚Äù specifies the file path and name of the file to be copied.
                ‚Äúcopied_file‚Äù specified the path and name of the copied file

üõë Deleting a file

‚úÖ The unlink function is used to delete the file. The code below illustrates the implementation.

üõë PHP file_get_contents() Function

‚úÖ The file_get_contents function is used to read the entire file contents.

‚úÖ The difference between file_get_contents and fgets is that file_get_contents returns the file data as a string while fgets reads the file line by line. 

‚≠ï PHP Try Catch Example: Exception & Error Handling

üõë What is an Exception?

‚úÖ An error is an unexpected program result that cannot be handled by the program itself.

‚úÖ Errors are resolved by fixing the program. An example of an error would be an infinite loop that never stops executing.

‚úÖ An exception is unexpected program result that can be handled by the program itself.

‚úÖ Examples of exception include trying to open a file that does not exist.

‚úÖ This exception can be handled by either creating the file or presenting the user with an option of searching for the file.

üõë Why handle exception?

‚úÖ Avoid unexpected results on our pages which can be very annoying or irritating to our end users

‚úÖ Improve the security of our applications by not exposing information which malicious users may use to attack our applications

‚úÖ Php Exceptions are used to change the normal flow of a program if any predictable error occurs.

üõë PHP Error handling

‚úÖ When an error occurs, depending on your configuration settings, PHP displays the error message in the web browser with information relating to the error that occurred.

‚úÖ We are going to look at three (3) commonly used methods;

        Die statements ‚Äì the die function combines the echo and exit function in one. 
                        It is very useful when we want to output a message and stop the script execution when an error occurs.
        
        Custom error handlers ‚Äì these are user defined functions that are called whenever an error occurs.
        
        PHP error reporting ‚Äì the error message depending on your PHP error reporting settings. 
                            This method is very useful in development environment when you have no idea what caused the error. 
                            The information displayed can help you debug your application.

üõë Error Handling Examples

‚úÖ Custom error handlers are powerful in the sense that
        
        They allow us to customize the error messages.
        The custom error handler can also include error logging in a file/database, emailing the developer etc.

‚úÖ 
    <?php
    error_reporting($reporting_level);
    ?>
            HERE,

            ‚Äúerror_reporting‚Äù is the PHP error reporting function
            ‚Äú$reporting_level‚Äù is optional, can be used to set the reporting level. 
            If no reporting level has been specified, PHP will use the default error reporting level as specified in the php.ini file.

    Reporting Level	            Description	Example
    +-------------------------------------------------------------------------------------------------------------------------------------------------------+

    E_WARNING	                Displays warning messages only. Does not halt the execution of the script	error_reporting(E_WARNING);
    E_NOTICE	                Displays notices that can occur during normal execution of a program or could be an error.	error_reporting(E_ NOTICE);
    E_USER_ERROR	            Displays user generated errors i.e. custom error handler	error_reporting(E_ USER_ERROR);
    E_USER_WARNING	            Displays user generated warning messages	error_reporting(E_USER_WARNING);
    E_USER_NOTICE	            Displays user generated notices	error_reporting(E_USER_NOTICE);
    E_RECOVERABLE_ERROR	        Displays error that are not fatal and can be handled using custom error handlers	error_reporting(E_RECOVERABLE_ERROR);
    E_ALL	                    Displays all errors and warnings	error_reporting(E_ ALL);

üõë Difference between Errors and Exception:

‚úÖ Exceptions are thrown and intended to be caught while errors are generally irrecoverable.

‚úÖ Exceptions are handled in an object oriented way.This means when an exception is thrown; an exception object is created that contains the exception details.

üõë The table below shows the exception object methods

‚úÖ getMessage()	Displays the exception‚Äôs message	

        <?php
        echo $e->getMessage();
        ?>

‚úÖ getCode()	Displays the numeric code that represents the exception	

        <?php
        echo $e->getCode();
        ?>

‚úÖ getFile()	Displays the file name and path where the exception occurred	

        <?php
        echo $e->getFile();
        ?>

‚úÖ getLine()	Displays the line number where the exception occurred	

        <?php
        echo $e->getLine();
        ?>

‚úÖ getTrace()	Displays an array of the backtrace before the exception	

        <?php
        print_r( $e->getTrace());
        ?>

‚úÖ getPrevious()	Displays the previous exception before the current one	

        <?php
        echo $e->getPrevious();
        ?>
        
‚úÖ getTraceAsString()	Displays the backtrace of the exception as a string instead of an array	

        <?php
        echo $e->getTraceAsString();
        ?>

‚úÖ __toString()	Displays the entire exception as a string	

        <?php
        echo $e->__toString();
        ?>

‚úÖ 
    <?php
    throw new Exception("This is an exception example");
    ?>
        HERE,

        ‚Äúthrow‚Äù is the keyword used to throw the exception
        ‚Äúnew Exception(‚Ä¶)‚Äù creates an exception object and passes ‚ÄúThis is an exception example ‚Äú string as the message parameter.

‚úÖ 

    <?php
    try {
        $var_msg = "This is an exception example";
        throw new Exception($var_msg);
    }
    catch (Exception $e) {
        echo "Message: " . $e->getMessage();
        echo "";
        echo "getCode(): " . $e->getCode();
        echo "";
        echo "__toString(): " . $e->__toString();
    }
    ?>

üõë Multiple Exceptions

‚úÖ Multiple exception use multiple try catch blocks to handle the thrown exceptions. Multiple exceptions are useful when;

        You want to display a customized message depending on the exception thrown
        You want to perform a unique operation depending on the exception thrown

‚≠ï PHP preg_match(): Regular Expressions (Regex)
